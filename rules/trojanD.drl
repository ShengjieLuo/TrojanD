//package com.rules.trojan

import com.model.problem.Trojan
import com.model.other.Time
import com.model.other.Type
import com.model.Item
import com.model.Problem
import com.service.TroDItem

// This rule is a naive simple to detect Trojan in KMeans
// Key Logic:
//1. 进行数据筛选，将只有upload/download的数据筛选出来
//2. 从基础数据中获取八个维度的数据,组成一个向量
//3. 这个向量，通过已经学习好的KMEANS模型进行判定
//4. 判定出的结果输出到数据库



//=========================================================================
// Set the runtime environment
//=========================================================================

global java.util.List kvector

rule "SET: begin detection time"
   salience 100
   lock-on-active true
   dialect "mvel"
   when
     $time : Time()
   then
     $time.setbeginTime(1480867200)
     System.out.println("  [Rule]  SET: begin detection time 1490630400")
     update($time)
end

rule "SET: end detection time"
   salience 100
   lock-on-active true
   dialect "mvel"
   when
     $time : Time()
   then
     $time.setendTime(1480870000)
     System.out.println("  [Rule]  SET: end detection time 1490634000") 
     update($time)
end

rule "VERIFY: verify the time operation"
   //lock-on-active true
   dialect "mvel"
   when
     $time : Time(beginTime == 1490630400 && endTime == 1490634000)
   then
     System.out.println("  [Rule]  VERIFY: verify the time operation :Correct")
end

rule "SET: detection type"
   lock-on-active true
   dialect "mvel"
   when
     $type : Type()
   then
     $type.setType("Trojan in KMeans")
     System.out.println("  [Rule]  SET: end detection type Trojan")
     update($type)
     drools.setFocus("Filter")
end


//==========================================================================
// Set the statistical data required for judgement
//=========================================================================

rule "Filter : Filter the item with both upload&download"
   no-loop true
   //lock-on-active true
   agenda-group "Filter"
   salience 25
   dialect "mvel"
   when
     //$item : Item( up_count>=0 && down_count>=0 && syn>=0 && psh>=0 && up_size>=0 && down_size>=0 && session_total>=0 && session_count>=0 && dns>0 && up_small>=0 && down_small>=0 && status == 0)
     $item : Item( up_count > 0 && down_count > 0 && up_size > 0 && down_size > 0 && syn >= 0 && psh >= 0 && session_count >=0 && session_total >= 0 && dns >= 0 && up_small >= 0 && status == 0)
   then
     $item.setValid()
     System.out.println("  [Rule]  Filter : Filter the item with both upload&download "+$item.obj)
     update($item)
end

rule "Filter : Conclusion"
   no-loop true
   //lock-on-active true
   agenda-group "Filter"
   salience 20
   dialect "mvel"
   when
     $item : Item( valid == true && status == 0)
   then
     $item.setStatus(1)
     update($item)
     System.out.println("  [Rule]  Filter : Filter conclusion "+$item.obj)
     drools.setFocus("Dimension Addition")
end

//==========================================================================
// Insert Dimension
//=========================================================================

rule "Add Dimesion: Upload-Download-Count-Ratio "
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 10
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1)
   then
     Double newD = $item.up_count/$item.down_count
     $item.addDimension("Upload-Download-Count-Ratio",newD)
     System.out.println("  [Rule]  Add Dimesion: Upload-Download-Count-Ratio " + $item.obj + " "+ newD)
     update($item)
end


rule "Add Dimesion: Upload-Download-Size-Ratio "
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 10
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1 )
   then
     Double newD = $item.up_size/$item.down_size
     $item.addDimension("Upload-Download-Size-Ratio",newD)
     System.out.println("  [Rule]  Add Dimesion: Upload-Download-Size-Ratio "+$item.obj + " "+ newD)
     update($item)
end

rule "Add Dimesion: SYN-Ratio "
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 10
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1 )
   then
     Double newD = $item.syn/$item.up_count
     $item.addDimension("SYN-Ratio",  newD)
     System.out.println("  [Rule]  Add Dimesion: SYN-Ratio "+$item.obj+ " "+ newD)
     update($item)
end

rule "Add Dimesion: PSH-Ratio "
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 10
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1)
   then
     Double newD = $item.psh/$item.down_count
     $item.addDimension("PSH-Ratio",newD)
     System.out.println("  [Rule]  Add Dimesion: PSH-Ratio "+$item.obj + " "+ newD)
     update($item)
end

rule "Add Dimension: DNS Count"
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 10
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1)
   then
     $item.addDimension("DNS",$item.dns)
     System.out.println("  [Rule]  Add Dimesion: DNS "+$item.obj+ " "+$item.dns)
     update($item)
end

rule "Add Dimension: Upload Small Ration"
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 10
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1)
   then
     Double newD = $item.up_small/$item.up_count
     $item.addDimension("Upload-Small-Ratio", newD)
     System.out.println("  [Rule]  Add Dimension: Upload Small Ration "+$item.obj + " "+ newD)
     update($item)
end

rule "Add Dimension: Session Time"
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 10
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1)
   then
     Double newD = $item.session_total / $item.session_count
     $item.addDimension("Session Time",newD)
     System.out.println("  [Rule]  Add Dimension: Average Session Time "+$item.obj+ " "+ newD)
     update($item)
end

rule "Add Dimension: Conclusion"
   no-loop true
   lock-on-active true
   agenda-group "Dimension Addition"
   salience 9
   dialect "mvel"
   when
     $item : Item( valid == true && status == 1)
   then
     $item.setStatus(2)
     update($item)
     System.out.println("  [Rule]  Add Dimension: Conclusion "+$item.obj)
     drools.setFocus("Judgement")
end

//==========================================================================
// Predict && Judgement
//=========================================================================
rule "KMeans Judgement"
   lock-on-active true
   agenda-group "Judgement" 
   salience 5
   dialect "mvel"
   when
     $item :TroDItem( valid == true && status == 2)
     $time :Time()
   then
     $item.SA_KMEANS_JUDGEMENT($time,["Session Time","DNS","Upload-Download-Count-Ratio","Upload-Download-Size-Ratio","SYN-Ratio","PSH-Ratio","Upload-Small-Ratio"])
     update($item)
     System.out.println("  [Rule]  KMeans Judgement Execution: "+$item.obj)
end

rule "GMM Judgement"
   lock-on-active true
   agenda-group "Judgement"
   salience 5
   dialect "mvel"
   when
     $item :TroDItem( valid == true && status == 2)
     $time :Time()
   then
     $item.SA_GMM_JUDGEMENT($time,["Session Time","DNS","Upload-Download-Count-Ratio","Upload-Download-Size-Ratio","SYN-Ratio","PSH-Ratio","Upload-Small-Ratio"])
     update($item)
     System.out.println("  [Rule]  GMM Judgement Execution: "+$item.obj)
end

rule "Bisect Judgement"
   lock-on-active true
   agenda-group "Judgement"
   salience 5
   dialect "mvel"
   when
     $item :TroDItem( valid == true && status == 2)
     $time :Time()
   then
     $item.SA_BISECT_JUDGEMENT($time,["Session Time","DNS","Upload-Download-Count-Ratio","Upload-Download-Size-Ratio","SYN-Ratio","PSH-Ratio","Upload-Small-Ratio"])
     update($item)
     System.out.println("  [Rule]  Bisect Judgement Execution: "+$item.obj)
end

rule "Judgement Conclusion"
   lock-on-active true
   agenda-group "Judgement"
   salience 4
   dialect "mvel"
   when
     $item :TroDItem( valid == true && status == 2)
     $time :Time()
   then
     $item.setStatus(3)
     update($item)
     System.out.println("  [Rule]  Judgement Conclusion: "+$item.obj)
     drools.setFocus("Conclusion")
end



//==========================================================================
// Conclusion
//=========================================================================

rule "Detect Abnormal"
   lock-on-active true
   agenda-group "Conclusion" 
   salience 3
   dialect "mvel"
   when
     $item :Item( gmmFlag == 1 && status == 3)
   then
     $item.setFlag(1)
     update($item)
     System.out.println("  [Rule]  GMM Judgement Report1: "+$item.obj)
end

rule "Detect Abnormal 2"
   lock-on-active true
   agenda-group "Conclusion"
   salience 3
   dialect "mvel"
   when
     $item : Item( bisectFlag == 1 && status == 3)
   then
     $item.setFlag(1)
     update($item)
     System.out.println("  [Rule]  Bisect Judgement Report2: "+$item.obj)
end

rule "Detect Abnormal 3"
   lock-on-active true
   agenda-group "Conclusion"
   salience 3
   dialect "mvel"
   when
     $item :Item( kmeansFlag == 1 && status == 3 )
   then
     $item.setFlag(1)
     update($item)
     System.out.println("  [Rule]  KMeans Judgement Report3: "+$item.obj)
end

rule "Conclusion Finish"
   lock-on-active true
   agenda-group "Conclusion"
   salience 2
   dialect "mvel"
   when
     $item :Item( status == 3 )
   then
     $item.setStatus(4)
     update($item)
     drools.setFocus("Save")
end

//==========================================================================
// Save
//=========================================================================

rule "Save to SQL"
   lock-on-active true
   agenda-group "Save"
   salience 1
   dialect "mvel"
   when
     $item :Item( flag == 1 && status == 4)
   then
     $item.saveToSQL()
     delete($item)
     System.out.println("  [Rule]  Save to SQL: "+$item.obj)
end

